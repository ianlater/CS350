Title: Writeup for Project 2, Fall 2015
Date: 10/19/2015
Group: Name-----------Email
	   John Lucas	  johnluca@usc.edu
	   Ian Later	  later@usc.edu
	   Carrie Sun	  carriesu@usc.edu
	  
I. Requirements:
+Overview
Design and Implement syscalls in order to separate user and kernel code. Ensure that user can do nothing to violate security
of data (eg. access physical memory directly, cause OS to crash). After implementing syscalls, we update the Passport office
to be a user program only using this syscalls, and ran two processes of it.

II. Assumptions

III. Design


IV. Implementation
	+Files Modified
  userprog/exception.cc
  userprog/addrspace.cc
  userprog/addrspace.h
  userprog/progtest.cc
  userprog/syscall.h
  tests/start.s
  
	+Files Added
	tests/fork.c
	tests/exec.c
	test/lockcondition.c
	tests/passport.c
	
	+Data Structures added, and file added to
  Process ProcessTable, KernelLock LockTable, KernelCondition ConditionTable added to Exception.cc
  
	+Data Structures modified, and the file added to
	
	
	+Functions added and in which file
	userprog/addrspace.h: getId(), setID(int), getNumPages(), setNumPages(int), getBaseDataSize(), CreateStack(int)
	userprog/exception.cc: KernelThread(int), Fork_Syscall(int),Yield_Syscall(), CreateLock_Syscall(int, int), Acquire_Syscall(int), Release_Syscall(int), DestroyLock_Syscall(int), CreateCondition_Syscall(int, int), DestroyCondition_Syscall(int), Wait_Syscall(int, int), Signal_Syscall(int, int), Broadcast_Syscall(int, int), Print_Syscall(int, int, int, int), PrintInt_Syscall(int, int, int, int), Rand_Syscall(), Exec_Thread(), Exec_Syscall(int, int),Exit_Syscall(int)
	userprog/syscall.h: CreateLock(char*, int), DestroyLock(int), Acquire(int), Release(int), CreateCondition(int), DestroyCondition(int), Signal(int, int), Wait(int, int), Broadcast(int, int), Print(char*, int, char*, char*), PrintInt(char*, int, char*, char*),Rand
	
	+Functions modified and in which file
	userprog/exception.cc: ExceptionHandler
	
V. Testing
	+How to test
	The part 1 syscalls involving locks and conditions can be tested with the /tests/lockcondition binary. In this test, the possible user inputs for creating, destroying, acquring, waiting, and releasing are all tested. The logic, however, is not tested as throughly as in project 1: the emphasis is on user input.
	
	+Test Output

	
VI. Discussion
	+Experiment expectation (What is supposed to happen)
	
	+Experiment result. (What actually happened)
		
	+Explanation
		
VIII. Miscellaneous:
	
